package com.example.examplemod.accessory;

import net.minecraft.ChatFormatting;
import net.minecraft.core.component.DataComponents;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.item.component.CustomData;
import net.neoforged.neoforge.common.util.Lazy;
import top.theillusivec4.curios.api.SlotContext;
import top.theillusivec4.curios.api.type.capability.ICurioItem;

import java.util.List;

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–∫–∞—á–∫–∏ (1-10), —Ä–µ–¥–∫–æ—Å—Ç—å, NBT –¥–∞–Ω–Ω—ã–µ
 */
public abstract class BaseAccessoryItem extends Item implements ICurioItem {
    protected final AccessoryType accessoryType;
    protected final AccessoryElement element;
    protected final Lazy<AccessoryStats> baseStats;

    // NBT –∫–ª—é—á–∏
    public static final String NBT_LEVEL = "AccessoryLevel";
    public static final String NBT_RARITY = "AccessoryRarity";

    public BaseAccessoryItem(AccessoryType type, AccessoryElement element, Properties properties) {
        super(properties.stacksTo(1)); // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –Ω–µ —Å—Ç–∞–∫–∞—é—Ç—Å—è
        this.accessoryType = type;
        this.element = element;
        
        // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞—Ç–æ–≤
        this.baseStats = Lazy.of(() -> {
            if (element == AccessoryElement.FIRE) {
                return AccessoryStats.createFireStats(type);
            } else {
                return AccessoryStats.createWaterStats(type);
            }
        });
    }

    public AccessoryType getAccessoryType() {
        return accessoryType;
    }

    public AccessoryElement getElement() {
        return element;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ (1-10)
     */
    public static int getLevel(ItemStack stack) {
        if (stack.isEmpty()) return 1;
        
        CustomData customData = stack.getOrDefault(DataComponents.CUSTOM_DATA, CustomData.EMPTY);
        int level = customData.copyTag().getInt(NBT_LEVEL);
        return level > 0 ? level : 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
     */
    public static void setLevel(ItemStack stack, int level) {
        int finalLevel = Math.clamp(level, 1, 10);
        stack.update(DataComponents.CUSTOM_DATA, CustomData.EMPTY, data -> 
            data.update(tag -> tag.putInt(NBT_LEVEL, finalLevel))
        );
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
     */
    public static AccessoryRarity getRarity(ItemStack stack) {
        if (stack.isEmpty()) return AccessoryRarity.COMMON;
        
        CustomData customData = stack.getOrDefault(DataComponents.CUSTOM_DATA, CustomData.EMPTY);
        int ordinal = customData.copyTag().getInt(NBT_RARITY);
        
        if (ordinal >= 0 && ordinal < AccessoryRarity.values().length) {
            return AccessoryRarity.values()[ordinal];
        }
        return AccessoryRarity.COMMON;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
     */
    public static void setRarity(ItemStack stack, AccessoryRarity rarity) {
        stack.update(DataComponents.CUSTOM_DATA, CustomData.EMPTY, data -> 
            data.update(tag -> tag.putInt(NBT_RARITY, rarity.ordinal()))
        );
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
     */
    public AccessoryStats getStats(ItemStack stack) {
        int level = getLevel(stack);
        AccessoryRarity rarity = getRarity(stack);
        return baseStats.get().calculate(level, rarity);
    }

    /**
     * –ú–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä
     */
    public static boolean canUpgrade(ItemStack stack) {
        return getLevel(stack) < 10;
    }

    /**
     * –£–ª—É—á—à–∏—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å
     */
    public static boolean upgrade(ItemStack stack) {
        if (!canUpgrade(stack)) {
            return false;
        }
        setLevel(stack, getLevel(stack) + 1);
        return true;
    }

    @Override
    public void appendHoverText(ItemStack stack, TooltipContext context, List<Component> tooltipComponents, TooltipFlag tooltipFlag) {
        super.appendHoverText(stack, context, tooltipComponents, tooltipFlag);
        
        int level = getLevel(stack);
        AccessoryRarity rarity = getRarity(stack);
        AccessoryStats stats = getStats(stack);

        // –£—Ä–æ–≤–µ–Ω—å –∏ —Ä–µ–¥–∫–æ—Å—Ç—å
        tooltipComponents.add(Component.literal("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").withStyle(ChatFormatting.DARK_GRAY));
        
        tooltipComponents.add(Component.literal("–£—Ä–æ–≤–µ–Ω—å: ")
            .withStyle(ChatFormatting.GRAY)
            .append(Component.literal(level + "/10")
                .withStyle(level == 10 ? ChatFormatting.GOLD : ChatFormatting.WHITE)));
        
        tooltipComponents.add(Component.literal("–†–µ–¥–∫–æ—Å—Ç—å: ")
            .withStyle(ChatFormatting.GRAY)
            .append(Component.literal(rarity.getRussianName())
                .withStyle(style -> style.withColor(rarity.getColor()))));

        tooltipComponents.add(Component.literal("–°—Ç–∏—Ö–∏—è: ")
            .withStyle(ChatFormatting.GRAY)
            .append(Component.literal(element.getRussianName())
                .withStyle(style -> style.withColor(element.getColor()))));

        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        tooltipComponents.add(Component.literal("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").withStyle(ChatFormatting.DARK_GRAY));
        
        if (stats.getHealth() > 0) {
            tooltipComponents.add(Component.literal("‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: ")
                .withStyle(ChatFormatting.RED)
                .append(Component.literal("+" + String.format("%.1f", stats.getHealth()))
                    .withStyle(ChatFormatting.WHITE)));
        }
        
        if (stats.getMana() > 0) {
            tooltipComponents.add(Component.literal("‚ú¶ –ú–∞–Ω–∞: ")
                .withStyle(ChatFormatting.AQUA)
                .append(Component.literal("+" + String.format("%.1f", stats.getMana()))
                    .withStyle(ChatFormatting.WHITE)));
        }
        
        if (stats.getManaRegen() > 0) {
            tooltipComponents.add(Component.literal("‚Üª –†–µ–≥–µ–Ω –º–∞–Ω—ã: ")
                .withStyle(ChatFormatting.BLUE)
                .append(Component.literal("+" + String.format("%.1f", stats.getManaRegen()) + "/—Å–µ–∫")
                    .withStyle(ChatFormatting.WHITE)));
        }
        
        if (stats.getDamage() > 0) {
            tooltipComponents.add(Component.literal("‚öî –£—Ä–æ–Ω: ")
                .withStyle(ChatFormatting.RED)
                .append(Component.literal("+" + String.format("%.1f", stats.getDamage()))
                    .withStyle(ChatFormatting.WHITE)));
        }
        
        if (stats.getDefense() > 0) {
            tooltipComponents.add(Component.literal("üõ° –ó–∞—â–∏—Ç–∞: ")
                .withStyle(ChatFormatting.GRAY)
                .append(Component.literal("+" + String.format("%.1f", stats.getDefense()))
                    .withStyle(ChatFormatting.WHITE)));
        }
        
        if (stats.getSpeed() > 0) {
            tooltipComponents.add(Component.literal("‚û§ –°–∫–æ—Ä–æ—Å—Ç—å: ")
                .withStyle(ChatFormatting.WHITE)
                .append(Component.literal("+" + String.format("%.3f", stats.getSpeed()))
                    .withStyle(ChatFormatting.WHITE)));
        }
        
        if (stats.getElementalPower() > 0) {
            tooltipComponents.add(Component.literal("‚ú® –°–∏–ª–∞ —Å—Ç–∏—Ö–∏–∏: ")
                .withStyle(style -> style.withColor(element.getColor()))
                .append(Component.literal("+" + String.format("%.1f", stats.getElementalPower()))
                    .withStyle(ChatFormatting.WHITE)));
        }
        
        if (stats.getElementalResistance() > 0) {
            tooltipComponents.add(Component.literal("‚õ® –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ")
                .withStyle(style -> style.withColor(element.getColor()))
                .append(Component.literal("+" + String.format("%.1f", stats.getElementalResistance()))
                    .withStyle(ChatFormatting.WHITE)));
        }

        // –ü–æ–¥—Å–∫–∞–∑–∫–∏
        tooltipComponents.add(Component.literal("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ").withStyle(ChatFormatting.DARK_GRAY));
        
        if (canUpgrade(stack)) {
            tooltipComponents.add(Component.literal("üíé –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞–º–Ω–µ–º –∑–∞—Ç–æ—á–∫–∏")
                .withStyle(ChatFormatting.GREEN));
        } else {
            tooltipComponents.add(Component.literal("‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!")
                .withStyle(ChatFormatting.GOLD));
        }
    }

    @Override
    public Component getName(ItemStack stack) {
        AccessoryRarity rarity = getRarity(stack);
        int level = getLevel(stack);
        
        String prefix = level > 0 ? "[+" + level + "] " : "";
        
        return Component.literal(prefix)
            .append(super.getName(stack))
            .withStyle(style -> style.withColor(rarity.getColor()));
    }

    // Curios API –º–µ—Ç–æ–¥—ã
    @Override
    public boolean canEquipFromUse(SlotContext slotContext, ItemStack stack) {
        return true;
    }
}
