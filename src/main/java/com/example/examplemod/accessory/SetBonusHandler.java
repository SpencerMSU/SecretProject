package com.example.examplemod.accessory;

import com.example.examplemod.ExampleMod;
import com.example.examplemod.effects.ModEffects;
import com.example.examplemod.items.ModItems;
import io.wispforest.accessories.api.AccessoriesCapability;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.core.Holder;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.neoforge.event.tick.PlayerTickEvent;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@EventBusSubscriber(modid = ExampleMod.MODID)
public class SetBonusHandler {

    private static List<Item> fireAccessories = null;
    private static List<Item> waterAccessories = null;

    private static List<Item> getFireAccessories() {
        if (fireAccessories == null) {
            fireAccessories = List.of(
                ModItems.FIRE_CHARM.get(),
                ModItems.FIRE_MASK.get(),
                ModItems.FIRE_HAT.get(),
                ModItems.FIRE_NECKLACE.get(),
                ModItems.FIRE_CAPE.get(),
                ModItems.FIRE_BACK.get(),
                ModItems.FIRE_WRIST.get(),
                ModItems.FIRE_HAND_1.get(),
                ModItems.FIRE_HAND_2.get(),
                ModItems.FIRE_RING_1.get(),
                ModItems.FIRE_RING_2.get(),
                ModItems.FIRE_BELT.get(),
                ModItems.FIRE_ANKLET.get(),
                ModItems.FIRE_SHOES.get()
            );
        }
        return fireAccessories;
    }

    private static List<Item> getWaterAccessories() {
        if (waterAccessories == null) {
            waterAccessories = List.of(
                ModItems.WATER_CHARM.get(),
                ModItems.WATER_MASK.get(),
                ModItems.WATER_HAT.get(),
                ModItems.WATER_NECKLACE.get(),
                ModItems.WATER_CAPE.get(),
                ModItems.WATER_BACK.get(),
                ModItems.WATER_WRIST.get(),
                ModItems.WATER_HAND_1.get(),
                ModItems.WATER_HAND_2.get(),
                ModItems.WATER_RING_1.get(),
                ModItems.WATER_RING_2.get(),
                ModItems.WATER_BELT.get(),
                ModItems.WATER_ANKLET.get(),
                ModItems.WATER_SHOES.get()
            );
        }
        return waterAccessories;
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    private static final Map<UUID, SetStatus> FULL_SET_STATUS = new HashMap<>();
    
    private static class SetStatus {
        public final boolean fireSet;
        public final boolean waterSet;
        
        public SetStatus(boolean fireSet, boolean waterSet) {
            this.fireSet = fireSet;
            this.waterSet = waterSet;
        }
    }

    @SubscribeEvent
    public static void onPlayerTick(PlayerTickEvent.Post event) {
        Player player = event.getEntity();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (20 —Ç–∏–∫–æ–≤)
        if (player.level().getGameTime() % 20 != 0) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω—ã—Ö —Å–µ—Ç–æ–≤
        int fireAccessoriesCount = countFireAccessories(player);
        int waterAccessoriesCount = countWaterAccessories(player);
        boolean hasFullFireSet = fireAccessoriesCount >= 14;
        boolean hasFullWaterSet = waterAccessoriesCount >= 14;

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        SetStatus previousStatus = FULL_SET_STATUS.get(player.getUUID());
        if (previousStatus == null) {
            previousStatus = new SetStatus(false, false);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–≥–Ω–µ–Ω–Ω—ã–π —Å–µ—Ç
        handleFireSet(player, hasFullFireSet, previousStatus.fireSet);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–¥–Ω—ã–π —Å–µ—Ç
        handleWaterSet(player, hasFullWaterSet, previousStatus.waterSet);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        FULL_SET_STATUS.put(player.getUUID(), new SetStatus(hasFullFireSet, hasFullWaterSet));
    }

    private static void handleFireSet(Player player, boolean hasFullSet, boolean previousStatus) {
        if (hasFullSet) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–¥–µ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–µ—Ç–∞
            if (!previousStatus) {
                player.sendSystemMessage(
                    Component.literal("")
                );
                player.sendSystemMessage(
                    Component.literal("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        .withStyle(ChatFormatting.DARK_RED, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("üî• –ü–û–õ–ù–´–ô –û–ì–ù–ï–ù–ù–´–ô –°–ï–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üî•")
                        .withStyle(ChatFormatting.RED, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("–ë–æ–Ω—É—Å—ã:")
                        .withStyle(ChatFormatting.GOLD, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚àû –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚öî –°–∏–ª–∞ II")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  üõ° –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ II")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚ù§ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è I")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚û§ –°–∫–æ—Ä–æ—Å—Ç—å I")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚ú® –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω—ã V")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  üî• -40% —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚è± -15% –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("  üíé +200 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞–Ω–∞")
                        .withStyle(ChatFormatting.YELLOW)
                );
                player.sendSystemMessage(
                    Component.literal("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        .withStyle(ChatFormatting.DARK_RED, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("")
                );
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –∑–∞—â–∏—Ç—É –æ—Ç –æ–≥–Ω—è
            player.addEffect(new MobEffectInstance(
                MobEffects.FIRE_RESISTANCE,
                Integer.MAX_VALUE, // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                0,
                false, // –Ω–µ ambient
                false, // –Ω–µ –≤–∏–¥–∏–º—ã–π
                true // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É
            ));

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞—Ñ—Ñ—ã –ø–æ–ª–Ω–æ–≥–æ —Å–µ—Ç–∞
            player.addEffect(new MobEffectInstance(
                MobEffects.DAMAGE_BOOST, // –°–∏–ª–∞
                25,
                1, // –°–∏–ª–∞ II
                true,
                false
            ));

            player.addEffect(new MobEffectInstance(
                MobEffects.DAMAGE_RESISTANCE, // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω—É
                25,
                1, // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ II
                true,
                false
            ));

            player.addEffect(new MobEffectInstance(
                MobEffects.REGENERATION, // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                25,
                0, // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è I
                true,
                false
            ));

            player.addEffect(new MobEffectInstance(
                MobEffects.MOVEMENT_SPEED, // –°–∫–æ—Ä–æ—Å—Ç—å
                25,
                0, // –°–∫–æ—Ä–æ—Å—Ç—å I
                true,
                false
            ));

            // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω—ã V (5 —É—Ä–æ–≤–Ω–µ–π –ø–æ +7% = +35% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞–Ω—ã)
            Holder<MobEffect> manaRegenHolder = BuiltInRegistries.MOB_EFFECT.wrapAsHolder(ModEffects.MANA_REGENERATION.get());
            player.addEffect(new MobEffectInstance(
                manaRegenHolder,
                25,
                4, // –£—Ä–æ–≤–µ–Ω—å V (0-4 = —É—Ä–æ–≤–Ω–∏ I-V)
                true,
                false
            ));
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π —Å–µ—Ç —Å–Ω—è—Ç, —Å–Ω–∏–º–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            if (previousStatus) {
                // –°–Ω–∏–º–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Å–µ—Ç–∞
                player.removeEffect(MobEffects.FIRE_RESISTANCE);
                player.removeEffect(MobEffects.DAMAGE_BOOST);
                player.removeEffect(MobEffects.DAMAGE_RESISTANCE);
                player.removeEffect(MobEffects.REGENERATION);
                player.removeEffect(MobEffects.MOVEMENT_SPEED);
                player.removeEffect(BuiltInRegistries.MOB_EFFECT.wrapAsHolder(ModEffects.MANA_REGENERATION.get()));
                
                player.sendSystemMessage(
                    Component.literal("üî• –û–≥–Ω–µ–Ω–Ω—ã–π —Å–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                        .withStyle(ChatFormatting.GRAY)
                );
            }
        }
    }

    private static void handleWaterSet(Player player, boolean hasFullSet, boolean previousStatus) {
        if (hasFullSet) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–¥–µ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–µ—Ç–∞
            if (!previousStatus) {
                player.sendSystemMessage(
                    Component.literal("")
                );
                player.sendSystemMessage(
                    Component.literal("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        .withStyle(ChatFormatting.DARK_BLUE, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("üíß –ü–û–õ–ù–´–ô –í–û–î–ù–´–ô –°–ï–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üíß")
                        .withStyle(ChatFormatting.BLUE, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("–ë–æ–Ω—É—Å—ã:")
                        .withStyle(ChatFormatting.GOLD, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚àû –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–¥–≤–æ–¥–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  üê¨ –ì—Ä–∞—Ü–∏—è –¥–µ–ª—å—Ñ–∏–Ω–∞ II")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  üõ° –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ II")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚ù§ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è II")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚û§ –°–∫–æ—Ä–æ—Å—Ç—å II")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚ú® –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω—ã V")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  üíß -40% —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–¥–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  ‚è± -15% –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("  üíé +200 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞–Ω–∞")
                        .withStyle(ChatFormatting.AQUA)
                );
                player.sendSystemMessage(
                    Component.literal("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        .withStyle(ChatFormatting.DARK_BLUE, ChatFormatting.BOLD)
                );
                player.sendSystemMessage(
                    Component.literal("")
                );
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–¥–≤–æ–¥–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ
            player.addEffect(new MobEffectInstance(
                MobEffects.WATER_BREATHING,
                Integer.MAX_VALUE, // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                0,
                false, // –Ω–µ ambient
                false, // –Ω–µ –≤–∏–¥–∏–º—ã–π
                true // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É
            ));

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞—Ñ—Ñ—ã –ø–æ–ª–Ω–æ–≥–æ –≤–æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞
            player.addEffect(new MobEffectInstance(
                MobEffects.DOLPHINS_GRACE, // –ì—Ä–∞—Ü–∏—è –¥–µ–ª—å—Ñ–∏–Ω–∞
                25,
                1, // –ì—Ä–∞—Ü–∏—è –¥–µ–ª—å—Ñ–∏–Ω–∞ II
                true,
                false
            ));

            player.addEffect(new MobEffectInstance(
                MobEffects.DAMAGE_RESISTANCE, // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω—É
                25,
                1, // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ II
                true,
                false
            ));

            player.addEffect(new MobEffectInstance(
                MobEffects.REGENERATION, // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                25,
                1, // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è II
                true,
                false
            ));

            player.addEffect(new MobEffectInstance(
                MobEffects.MOVEMENT_SPEED, // –°–∫–æ—Ä–æ—Å—Ç—å
                25,
                1, // –°–∫–æ—Ä–æ—Å—Ç—å II
                true,
                false
            ));

            // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω—ã V (5 —É—Ä–æ–≤–Ω–µ–π –ø–æ +7% = +35% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞–Ω—ã)
            Holder<MobEffect> manaRegenHolder = BuiltInRegistries.MOB_EFFECT.wrapAsHolder(ModEffects.MANA_REGENERATION.get());
            player.addEffect(new MobEffectInstance(
                manaRegenHolder,
                25,
                4, // –£—Ä–æ–≤–µ–Ω—å V (0-4 = —É—Ä–æ–≤–Ω–∏ I-V)
                true,
                false
            ));
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π —Å–µ—Ç —Å–Ω—è—Ç, —Å–Ω–∏–º–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            if (previousStatus) {
                // –°–Ω–∏–º–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –≤–æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞
                player.removeEffect(MobEffects.WATER_BREATHING);
                player.removeEffect(MobEffects.DOLPHINS_GRACE);
                player.removeEffect(MobEffects.DAMAGE_RESISTANCE);
                player.removeEffect(MobEffects.REGENERATION);
                player.removeEffect(MobEffects.MOVEMENT_SPEED);
                player.removeEffect(BuiltInRegistries.MOB_EFFECT.wrapAsHolder(ModEffects.MANA_REGENERATION.get()));
                
                player.sendSystemMessage(
                    Component.literal("üíß –í–æ–¥–Ω—ã–π —Å–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                        .withStyle(ChatFormatting.GRAY)
                );
            }
        }
    }

    public static boolean hasFullFireSet(Player player) {
        int fireAccessoriesCount = countFireAccessories(player);
        return fireAccessoriesCount >= 14; // –í—Å–µ 14 –æ–≥–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    }
    
    public static boolean hasFullWaterSet(Player player) {
        int waterAccessoriesCount = countWaterAccessories(player);
        return waterAccessoriesCount >= 14; // –í—Å–µ 14 –≤–æ–¥–Ω—ã—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    }
    
    public static int countFireAccessories(Player player) {
        Optional<AccessoriesCapability> capability = AccessoriesCapability.getOptionally(player);
        if (capability.isEmpty()) {
            return 0;
        }

        List<Item> fireAccessoriesList = getFireAccessories();
        int count = 0;
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ—Ç—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        var containers = capability.get().getContainers();
        for (var containerEntry : containers.entrySet()) {
            var accessories = containerEntry.getValue().getAccessories();
            for (var stackPair : accessories) {
                ItemStack stack = stackPair.getSecond();
                if (!stack.isEmpty() && fireAccessoriesList.contains(stack.getItem())) {
                    count++;
                }
            }
        }

        return count;
    }
    
    public static int countWaterAccessories(Player player) {
        Optional<AccessoriesCapability> capability = AccessoriesCapability.getOptionally(player);
        if (capability.isEmpty()) {
            return 0;
        }

        List<Item> waterAccessoriesList = getWaterAccessories();
        int count = 0;
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ—Ç—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        var containers = capability.get().getContainers();
        for (var containerEntry : containers.entrySet()) {
            var accessories = containerEntry.getValue().getAccessories();
            for (var stackPair : accessories) {
                ItemStack stack = stackPair.getSecond();
                if (!stack.isEmpty() && waterAccessoriesList.contains(stack.getItem())) {
                    count++;
                }
            }
        }

        return count;
    }
}

